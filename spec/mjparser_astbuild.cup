package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;
import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

//Keywords
terminal PROG, BREAK, CLASS, ELSE, CONST, IF, WHILE, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE, FOREACH;

//Special Characters
terminal LBRACE, RBRACE, SEMI, LPAREN, RPAREN, LSQUAREBR, RSQUAREBR;

//Operators
terminal PLUS, MINUS, STAR, FWDSLASH, PERC, DBLEQ, EXLEQ, GRT, GRTEQ, LSS, LSSEQ, DBLAMP, DBLVER, COMMA, EQUAL, DBLPLUS, DBLMINUS;

//Value Tokens
terminal Integer NUMBER;
terminal String IDENT;
terminal Boolean BOOL;
terminal Character CHAR;

//TODO: organize categories better
//Objects
nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName, ClassName;
nonterminal GlobalDecl GlobalDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal ClassDecl ClassDecl;
nonterminal VarIdent VarIdent;
nonterminal FormalParamDecl FormalParamDecl;
nonterminal DesignatorStatement DesignatorStatement;


//Lists
nonterminal GlobalDeclList GlobalDeclList;
nonterminal MethodDeclList MethodDeclList;
nonterminal ConstDeclInnerList ConstDeclInnerList;
nonterminal VarDeclInnerList VarDeclInnerList;
nonterminal VarDeclList VarDeclList;
nonterminal StatementList StatementList;
nonterminal FormalParamList FormalParamList;
nonterminal DesignatorList DesignatorList;
nonterminal ActualParamList ActualParamList;

//Types and calculations
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, Condition, CondTerm, CondFact, ConstType;

//Operations
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal ConstIdentValue ConstIdentValue;

//Options
nonterminal Inheritance Inheritance;
nonterminal FormPars FormPars;
nonterminal ActualPars ActualPars;
nonterminal NumConst NumConst;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorWithEmpty;

//Statements
nonterminal Statement Statement;
nonterminal ConditionStatements ConditionStatements;

//Loop
nonterminal WhileEnter WhileEnter;

//Precedences
precedence left ELSE;

//GRAMMAR
Program ::= (Program) PROG ProgName:p GlobalDeclList:G1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, G1, M2); RESULT.setLine(pleft); :} 
;

ProgName ::= (ProgName) IDENT:pName {: RESULT=new ProgName(pName); RESULT.setLine(pNameleft); :} 
;

GlobalDeclList ::= (GlobalDeclarations) GlobalDeclList:G1 GlobalDecl:G2 {: RESULT=new GlobalDeclarations(G1, G2); RESULT.setLine(G1left); :}
				| (NoGlobalDecl) {: RESULT=new NoGlobalDecl(); :} /* epsilon */
;

GlobalDecl ::= (GlobalConstDeclaration) ConstDecl:C1 {: RESULT=new GlobalConstDeclaration(C1); RESULT.setLine(C1left); :} 
				| (GlobalVarDeclaration) VarDecl:V1 {: RESULT=new GlobalVarDeclaration(V1); RESULT.setLine(V1left); :}
				| (GlobalClassDeclaration) ClassDecl:C1 {: RESULT=new GlobalClassDeclaration(C1); RESULT.setLine(C1left); :}
				;
				
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} 
				;

ConstDecl ::= (ConstDecl) CONST ConstType:C1 ConstDeclInnerList:C2 SEMI {: RESULT=new ConstDecl(C1, C2); RESULT.setLine(C1left); :}
				;
				
ConstType ::= (ConstType) Type:constType {: RESULT=new ConstType(constType); RESULT.setLine(constTypeleft); :}
				;
				
ConstDeclInnerList ::= (ConstDecls) ConstDeclInnerList:C1 COMMA ConstIdentValue:C2 {: RESULT=new ConstDecls(C1, C2); RESULT.setLine(C1left); :}
				| (SingleConstDecl) ConstIdentValue:C1 {: RESULT=new SingleConstDecl(C1); RESULT.setLine(C1left); :}
				;
				
ConstIdentValue ::= (IntConstIdentValue) IDENT:cName EQUAL NUMBER:numValue {: RESULT=new IntConstIdentValue(cName, numValue); RESULT.setLine(cNameleft); :}
				| (BoolConstIdentValue) IDENT:cName EQUAL BOOL:boolValue {: RESULT=new BoolConstIdentValue(cName, boolValue); RESULT.setLine(cNameleft); :}
				| (CharConstIdentValue) IDENT:cName EQUAL CHAR:charValue {: RESULT=new CharConstIdentValue(cName, charValue); RESULT.setLine(cNameleft); :}
				;
				
VarDecl ::= (VarDecl) Type:varType VarDeclInnerList:V1 SEMI {: RESULT=new VarDecl(varType, V1); RESULT.setLine(varTypeleft); :}
				;
				
VarDeclInnerList ::= (VarDeclarationsInner) VarDeclInnerList:V1 COMMA VarIdent:V2 {: RESULT=new VarDeclarationsInner(V1, V2); RESULT.setLine(V1left); :}
				| (SingleVarDecl) VarIdent:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :}
				;
				
VarIdent ::= (VarSingle) IDENT:vName {: RESULT=new VarSingle(vName); RESULT.setLine(vNameleft); :}
				| (VarArray) IDENT:vName LSQUAREBR RSQUAREBR {: RESULT=new VarArray(vName); RESULT.setLine(vNameleft); :}
				| (VarError) error:err
		  		{: parser.report_error("Izvrsen oporavak od greske pri deklarisanju promenljive u liniji " + errleft, null);  :} {: RESULT=new VarError(); :}
				;

VarDeclList ::= (VarDeclarations) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclarations(V1, V2); RESULT.setLine(V1left); :}
				| (NoVarDecl) {: RESULT=new NoVarDecl(); :} /*epsilon*/
				;
				
ClassDecl ::= (ClassDecl) CLASS ClassName:cName Inheritance:I1 LBRACE VarDeclList:V2 RBRACE LBRACE MethodDeclList:M3 RBRACE {: RESULT=new ClassDecl(cName, I1, V2, M3); RESULT.setLine(cNameleft); :}
				;

ClassName ::= (ClassDeclEnter) IDENT:clName {: RESULT=new ClassDeclEnter(clName); RESULT.setLine(clNameleft); :};

Inheritance ::= (Extends) EXTENDS Type:parent {: RESULT=new Extends(parent); RESULT.setLine(parentleft); :} 
				| {: RESULT=new InheritanceDerived1(); :} /*epsilon*/
				;
				
MethodDeclList ::= (MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
				| (NoMethodDecl) {: RESULT=new NoMethodDecl(); :}/* epsilon */
				;

MethodDecl ::= (MethodDecl) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodDecl(M1, F2, V3, S4); RESULT.setLine(M1left); :} 
			   	;

MethodTypeName ::= (MethodBasicTypeName) Type:retType IDENT:methName {: RESULT=new MethodBasicTypeName(retType, methName); RESULT.setLine(retTypeleft); :}
				| (MethodVoidName) VOID IDENT:methName {: RESULT=new MethodVoidName(methName); RESULT.setLine(methNameleft); :}
				;

FormPars ::= (FormParams) FormalParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :} 
				| (NoFormParam) {: RESULT=new NoFormParam(); :} /* epsilon */ 
				;

FormalParamList ::= (FormalParamDecls) FormalParamList:F1 COMMA FormalParamDecl:F2 {: RESULT=new FormalParamDecls(F1, F2); RESULT.setLine(F1left); :}
				| (SingleFormalParamDecl) FormalParamDecl:F1 {: RESULT=new SingleFormalParamDecl(F1); RESULT.setLine(F1left); :}
				;
					
FormalParamDecl ::= (FormalParamDecl) Type:T1 IDENT:fpName {: RESULT=new FormalParamDecl(T1, fpName); RESULT.setLine(T1left); :}
				;

StatementList ::= (Statements) StatementList:S1 Statement:S2 {: RESULT=new Statements(S1, S2); RESULT.setLine(S1left); :} 
				| (StatementsBrackets) LBRACE StatementList:S1 Statement:S2 RBRACE {: RESULT=new StatementsBrackets(S1, S2); RESULT.setLine(S1left); :}
				| (NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */
				;	
				  
Statement ::= (DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :} 
			  |
			  (IfStmt) IF LPAREN Condition:C1 RPAREN ConditionStatements:C2 {: RESULT=new IfStmt(C1, C2); RESULT.setLine(C1left); :}   
			  |
			  (IfElseStmt) IF LPAREN Condition:C1 RPAREN ConditionStatements:C2 ELSE ConditionStatements:C3 {: RESULT=new IfElseStmt(C1, C2, C3); RESULT.setLine(C1left); :}
			  |
			  (WhileStmt) WhileEnter:W1 LPAREN Condition:C2 RPAREN ConditionStatements:C3 {: RESULT=new WhileStmt(W1, C2, C3); RESULT.setLine(W1left); :} 
			  |
			  (BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
			  |
			  (ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
			  |
			  (ReturnStmt) RETURN Expr:t SEMI {: RESULT=new ReturnStmt(t); RESULT.setLine(tleft); :}
			  |
			  (BlankReturnStmt) RETURN SEMI {: RESULT=new BlankReturnStmt(); :}
			  | 
			  (ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
			  |
			  (PrintStmt) PRINT LPAREN Expr:E1 NumConst:N2 RPAREN SEMI {: RESULT=new PrintStmt(E1, N2); RESULT.setLine(E1left); :}
			  ;

NumConst ::= (SpecNumConst) COMMA NUMBER:repeatVal {: RESULT=new SpecNumConst(repeatVal); RESULT.setLine(repeatValleft); :}
				| (NoNumConst) {: RESULT=new NoNumConst(); :} /*epsilon*/
				;

WhileEnter ::= (WhileEnter) WHILE {: RESULT=new WhileEnter(); :}
				;

ConditionStatements ::= (CndSingleStmt) Statement:S1 {: RESULT=new CndSingleStmt(S1); RESULT.setLine(S1left); :}
			  	| (CndMultipleStmts) LBRACE StatementList:S1 RBRACE {: RESULT=new CndMultipleStmts(S1); RESULT.setLine(S1left); :}
				| (CndNOStmts) SEMI {: RESULT=new CndNOStmts(); :} 
			  	;

DesignatorStatement ::= (Assignment) Designator:dest EQUAL Expr:e {: RESULT=new Assignment(dest, e); RESULT.setLine(destleft); :}
				| (AssignmentError) Designator:dest EQUAL error:err
				{: parser.report_error("Izvrsen oporavak od greske pri dodeli u liniji " + errleft, null);  :} {: RESULT=new AssignmentError(dest); RESULT.setLine(destleft); :}
				| (Increment) Designator:dest DBLPLUS {: RESULT=new Increment(dest); RESULT.setLine(destleft); :}
				| (Decrement) Designator:dest DBLMINUS {: RESULT=new Decrement(dest); RESULT.setLine(destleft); :}
				| (MultiAssignment) LSQUAREBR DesignatorList:D1 RSQUAREBR EQUAL Designator:D2 {: RESULT=new MultiAssignment(D1, D2); RESULT.setLine(D1left); :}
				| (StatementFuncCall) Designator:dest LPAREN ActualPars:A1 RPAREN {: RESULT=new StatementFuncCall(dest, A1); RESULT.setLine(destleft); :}
				;

Designator ::= (DesignatorBasic) IDENT:name {: RESULT=new DesignatorBasic(name); RESULT.setLine(nameleft); :}
				| (DesignatorElem) IDENT:name LSQUAREBR Expr:e RSQUAREBR {: RESULT=new DesignatorElem(name, e); RESULT.setLine(nameleft); :}
				;

DesignatorList ::= (SingleDesignator) DesignatorWithEmpty:D1 {: RESULT=new SingleDesignator(D1); RESULT.setLine(D1left); :}
				| (MultiDesignator) DesignatorList:D1 COMMA DesignatorWithEmpty:D2 {: RESULT=new MultiDesignator(D1, D2); RESULT.setLine(D1left); :}
				; 

DesignatorWithEmpty ::= (EmptyDes) {: RESULT=new EmptyDes(); :} /*epsilon*/
				| (NonEmptyDes) Designator:D1 {: RESULT=new NonEmptyDes(D1); RESULT.setLine(D1left); :}
				;

Condition ::= (CondSingleTerm) CondTerm:C1 {: RESULT=new CondSingleTerm(C1); RESULT.setLine(C1left); :}
				| (CondMultiTerms) Condition:C1 DBLVER CondTerm:C2 {: RESULT=new CondMultiTerms(C1, C2); RESULT.setLine(C1left); :}
				;

CondTerm ::= (CondTermSingleFact) CondFact:C1 {: RESULT=new CondTermSingleFact(C1); RESULT.setLine(C1left); :}
				| (CondTermMultiFacts) CondTerm:C1 DBLAMP CondFact:C2 {: RESULT=new CondTermMultiFacts(C1, C2); RESULT.setLine(C1left); :}
				;
								
CondFact ::= (CondFactSingleExpr) Expr:E1 {: RESULT=new CondFactSingleExpr(E1); RESULT.setLine(E1left); :} 
				| (CondFactMultiExpr) CondFact:C1 Relop:R2 Expr:E3 {: RESULT=new CondFactMultiExpr(C1, R2, E3); RESULT.setLine(C1left); :}
			  	;
			  	
Relop ::= (Equals) DBLEQ {: RESULT=new Equals(); :}
				| (NotEquals) EXLEQ {: RESULT=new NotEquals(); :}
				| (Greater) GRT {: RESULT=new Greater(); :}
				| (GreaterEquals) GRTEQ {: RESULT=new GreaterEquals(); :}
				| (Less) LSS {: RESULT=new Less(); :}
				| (LessEquals) LSSEQ {: RESULT=new LessEquals(); :}
				;
			  			  
Expr::= (AddExpr) Expr:te Addop:A1 Term:t {: RESULT=new AddExpr(te, A1, t); RESULT.setLine(teleft); :}
		 		| (TermExpr) Term:t {: RESULT=new TermExpr(t); RESULT.setLine(tleft); :}
		 		| (NegativeExpr) MINUS Term:T1 {: RESULT=new NegativeExpr(T1); RESULT.setLine(T1left); :}
		 		;

Term ::= (FactSingle) Factor:t {: RESULT=new FactSingle(t); RESULT.setLine(tleft); :}
				| (FactExpr) Term:te Mulop:M1 Factor:t {: RESULT=new FactExpr(te, M1, t); RESULT.setLine(teleft); :}
				;

Factor ::= (ConstNum) NUMBER:numVal {: RESULT=new ConstNum(numVal); RESULT.setLine(numValleft); :}
				| (ExprBrackets) LPAREN Expr:t RPAREN {: RESULT=new ExprBrackets(t); RESULT.setLine(tleft); :}
				| (ConstChar) CHAR:charVal {: RESULT=new ConstChar(charVal); RESULT.setLine(charValleft); :}
				| (ConstBool) BOOL:boolVal {: RESULT=new ConstBool(boolVal); RESULT.setLine(boolValleft); :}
				| (Var) Designator:d {: RESULT=new Var(d); RESULT.setLine(dleft); :}
		    	| (FuncCall) Designator:func LPAREN ActualPars:A1 RPAREN {: RESULT=new FuncCall(func, A1); RESULT.setLine(funcleft); :}
		    	| (NewArray) NEW Type:t LSQUAREBR Expr:te RSQUAREBR {: RESULT=new NewArray(t, te); RESULT.setLine(tleft); :}
		    	| (NewSingle) NEW Type:t LPAREN ActualPars:A1 RPAREN {: RESULT=new NewSingle(t, A1); RESULT.setLine(tleft); :}
		   		;

ActualPars ::= (Actuals) ActualParamList:A1 {: RESULT=new Actuals(A1); RESULT.setLine(A1left); :} 
				| (NoActuals) {: RESULT=new NoActuals(); :} /* epsilon */ 
			   	;
			   
ActualParamList ::= (ActualParams) ActualParamList:A1 COMMA Expr:E2 {: RESULT=new ActualParams(A1, E2); RESULT.setLine(A1left); :}
				| (ActualParam) Expr:E1 {: RESULT=new ActualParam(E1); RESULT.setLine(E1left); :}
				;

Addop ::= (Addop) PLUS {: RESULT=new Addop(); :} 
				| (Minusop) MINUS {: RESULT=new Minusop(); :}
				;
				
Mulop ::= (Mulop) STAR {: RESULT=new Mulop(); :} 
				| (Divop) FWDSLASH {: RESULT=new Divop(); :}
				| (Percop) PERC {: RESULT=new Percop(); :}
				;
